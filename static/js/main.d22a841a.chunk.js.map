{"version":3,"sources":["static/page.svg","static/group.svg","static/link.svg","TreeNode.jsx","static/arrow.svg","TreeGroup.jsx","utils.js","Tree.jsx","index.js"],"names":["TreeNode","props","this","renderIcon","type","getSvg","page","svgPage","group","svgGroup","link","svgLink","className","src","renderTitle","title","renderOp","onDragStart","e","currentTarget","classList","add","onTreeNodeDragStart","onDragEnd","remove","onTreeNodeDragEnd","onDragOver","preventDefault","draggable","data-__lp_tree_node_id","__lp_tree_node_id","React","Component","defaultProps","TreeGroup","state","expanded","setState","children","expandedAll","showLine","classnames","lastChild","stopPropagation","onDragLeave","svgArrow","onClick","map","node","addObjecKey","obj","key","value","Object","prototype","toString","call","Array","isArray","_obj","getNodeByIdAndDel","data","id","i","length","item","splice","setNodeByIdAndInsert","push","Tree","dragEnterIndex","dragEnterDOM","dragPlaceholderIndex","refDragPlaceholder","uniqueId","onDrag","elParent","parentElement","lastElementChild","getBoundingClientRect","enterElTop","top","enterElHeight","height","includes","clientY","insertBefore","nextElementSibling","placeholderData","appendChild","target","dataset","cloneDeep","style","display","Date","now","onDragEnter","firstElementChild","ref","r","ReactDom","findDOMNode","ReactDOM","render","StrictMode","href","document","getElementById"],"mappings":"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","file":"static/js/main.d22a841a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/page.f2be2014.svg\";","export default __webpack_public_path__ + \"static/media/group.f35c57f1.svg\";","export default __webpack_public_path__ + \"static/media/link.98c02ce7.svg\";","import React from \"react\";\nimport svgPage from \"./static/page.svg\";\nimport svgGroup from \"./static/group.svg\";\nimport svgLink from \"./static/link.svg\";\nimport \"./TreeNode.css\";\n\nexport default class TreeNode extends React.Component {\n  static defaultProps = {\n    type: \"page\",\n    title: \"\",\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  renderIcon() {\n    if (this.props.renderIcon) {\n      return this.props.renderIcon(this.props.type, this.props);\n    }\n\n    const getSvg = {\n      page: svgPage,\n      group: svgGroup,\n      link: svgLink,\n    };\n\n    return getSvg[this.props.type] ? (\n      <img\n        className=\"lp-react-tree-drag-TreeNode-icon\"\n        src={getSvg[this.props.type]}\n      />\n    ) : null;\n  }\n\n  renderTitle() {\n    if (this.props.renderTitle) {\n      return this.props.renderTitle(this.props.title, this.props);\n    }\n\n    return (\n      <div className=\"lp-react-tree-drag-TreeNode-title\">\n        {this.props.renderTitle\n          ? this.props.renderTitle(this.props.title, this.props)\n          : this.props.title}\n      </div>\n    );\n  }\n\n  renderOp() {\n    return (\n      <div className=\"lp-react-tree-drag-TreeNode-op\">\n        {this.props.renderOp ? this.props.renderOp(this.props) : null}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div\n        className=\"lp-react-tree-drag-TreeNode\"\n        onDragStart={(e) => {\n          const dom = e.currentTarget;\n          dom.classList.add(\"lp-react-tree-drag-TreeNode-dragStart\");\n          this.props.onTreeNodeDragStart && this.props.onTreeNodeDragStart(e);\n        }}\n        onDragEnd={(e) => {\n          const dom = e.currentTarget;\n          dom.classList.remove(\"lp-react-tree-drag-TreeNode-dragStart\");\n          this.props.onTreeNodeDragEnd && this.props.onTreeNodeDragEnd(e);\n        }}\n        onDragOver={(e) => e.preventDefault()}\n      >\n        <div\n          className=\"lp-react-tree-drag-TreeNode-left\"\n          draggable\n          data-__lp_tree_node_id={this.props.__lp_tree_node_id}\n        >\n          {this.renderIcon()}\n          {this.renderTitle()}\n        </div>\n        {this.renderOp()}\n      </div>\n    );\n  }\n}\n","export default __webpack_public_path__ + \"static/media/arrow.5e646b37.svg\";","import React from \"react\";\nimport { get } from \"lodash\";\nimport classnames from \"classnames\";\nimport TreeNode from \"./TreeNode.jsx\";\nimport svgArrow from \"./static/arrow.svg\";\nimport \"./TreeGroup.css\";\n\nexport default class TreeGroup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      expanded: this.props.expanded,\n    });\n  }\n\n  render() {\n    const { children, expandedAll, showLine } = this.props;\n    const { expanded } = this.state;\n    return (\n      <div\n        className={classnames(\"lp-react-tree-drag-TreeGroup\", {\n          \"lp-react-tree-drag-TreeGroup-collapse\": !expanded,\n        })}\n        onDragOver={(e) => {\n          e.currentTarget.lastChild.lastChild.classList.add(\n            \"lp-react-tree-drag-TreeGroup-enter\"\n          );\n          e.stopPropagation();\n          e.preventDefault();\n        }}\n        onDragLeave={(e) => {\n          e.currentTarget.lastChild.lastChild.classList.remove(\n            \"lp-react-tree-drag-TreeGroup-enter\"\n          );\n        }}\n      >\n        <img\n          className=\"lp-react-tree-drag-TreeGroup-arrow\"\n          src={svgArrow}\n          onClick={() =>\n            this.setState({\n              expanded: !expanded,\n            })\n          }\n        />\n        <div className=\"lp-react-tree-drag-TreeGroup-node\">\n          <TreeNode\n            {...this.props}\n            onTreeNodeDragStart={(e) => {\n              this.setState({\n                expanded: false,\n              });\n            }}\n            onTreeNodeDragEnd={(e) => {\n              this.setState({\n                expanded: true,\n              });\n            }}\n          />\n          <div\n            className={classnames(\"lp-react-tree-drag-TreeGroup-node-ch\", {\n              \"lp-react-tree-drag-TreeGroup-node-ch-line\": showLine,\n            })}\n          >\n            {(children || []).map((node) =>\n              node.type == \"group\" ? (\n                <TreeGroup\n                  {...node}\n                  expanded={expandedAll ? true : node.expanded}\n                  expandedAll={expandedAll}\n                  showLine={showLine}\n                />\n              ) : (\n                <TreeNode {...node} />\n              )\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","export function addObjecKey(obj, key, value) {\n  if (Object.prototype.toString.call(obj) != \"[object Object]\") {\n    return;\n  }\n\n  obj[key] =\n    Object.prototype.toString.call(value) == \"[object Function]\"\n      ? value()\n      : value;\n\n  Array.isArray(obj.children) &&\n    obj.children.map((_obj) => addObjecKey(_obj, key, value));\n\n  return obj;\n}\n\nexport function getNodeById(data, id) {\n  for (let i = 0; i < data.length; i++) {\n    let item = data[i];\n    if (item.__lp_tree_node_id == id) {\n      return item;\n    }\n\n    if (Array.isArray(item.children)) {\n      let value = getNodeById(item.children, id);\n      if (value) {\n        return value;\n      }\n    }\n  }\n}\n\nexport function getNodeByIdAndDel(data, id) {\n  for (let i = 0; i < data.length; i++) {\n    let item = data[i];\n    if (item.__lp_tree_node_id == id) {\n      data.splice(i, 1);\n      return item;\n    }\n\n    if (Array.isArray(item.children)) {\n      let value = getNodeByIdAndDel(item.children, id);\n      if (value) {\n        return value;\n      }\n    }\n  }\n}\n\nexport function getNodeByIdAndMarkNext(data, id) {\n  for (let i = 0; i < data.length; i++) {\n    let item = data[i];\n    if (item.__lp_tree_node_id == id) {\n      data[i] = \"next\";\n      return item;\n    }\n\n    if (Array.isArray(item.children)) {\n      let value = getNodeById(item.children, id);\n      if (value) {\n        return value;\n      }\n    }\n  }\n}\n\nexport function setNodeByIdAndInsert(data, id, value, type) {\n  if (!value) {\n    return data;\n  }\n\n  for (let i = 0; i < data.length; i++) {\n    let item = data[i];\n    if (item.__lp_tree_node_id == id) {\n      if (type == \"insertBefore\") {\n        data.splice(i, 0, value);\n      } else if (type == \"appendAfter\") {\n        data.splice(i + 1, 0, value);\n      } else if (type == \"appendChild\") {\n        if (data[i].children) {\n          data[i].children.push(value);\n        } else {\n          data[i].children = [value];\n        }\n      }\n\n      break;\n    }\n\n    if (Array.isArray(item.children)) {\n      setNodeByIdAndInsert(item.children, id, value, type);\n    }\n  }\n}\n\nexport function setNodeByNext(data, value) {\n  if (!value) {\n    return data;\n  }\n\n  for (let i = 0; i < data.length; i++) {\n    let item = data[i];\n    if (item == \"next\") {\n      data[i] = value;\n\n      break;\n    }\n\n    // if (Array.isArray(item.children)) {\n    //   let value = setNodeById(item.children, id);\n    //   if (value) {\n    //     break;\n    //   }\n    // }\n  }\n\n  return data;\n}\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport { get, uniqueId, cloneDeep } from \"lodash\";\n\nimport TreeGroup from \"./TreeGroup.jsx\";\nimport TreeNode from \"./TreeNode.jsx\";\nimport { addObjecKey, getNodeByIdAndDel, setNodeByIdAndInsert } from \"./utils\";\nimport \"./Tree.css\";\n\nexport default class Tree extends React.Component {\n  static defaultProps = {\n    data: [],\n    expandedAll: false,\n    showLine: false,\n    key: Date.now(),\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      expandedAll: false,\n      showLine: false,\n    };\n    this.dragEnterIndex = this.dragEnterDOM = this.dragPlaceholderIndex = this.refDragPlaceholder = this.data = null;\n  }\n\n  componentDidMount() {\n    this.setState({\n      data: this.props.data.map((item) =>\n        addObjecKey(item, \"__lp_tree_node_id\", uniqueId)\n      ),\n      expandedAll: this.props.expandedAll,\n      showLine: this.props.showLine,\n    });\n  }\n\n  render() {\n    const { data, expandedAll, showLine, key } = this.state;\n\n    return (\n      <div\n        key={key}\n        className=\"lp-react-tree-drag-Tree\"\n        onDrag={(e) => {\n          if (!this.dragEnterDOM) {\n            return;\n          }\n\n          // 可插入节点的父级容器\n          const elParent =\n            this.dragEnterDOM.parentElement.className ==\n            \"lp-react-tree-drag-TreeGroup-node\"\n              ? this.dragEnterDOM.parentElement.lastElementChild // group则取child容器\n              : this.dragEnterDOM.parentElement;\n\n          // 接收元素的实际位置\n          const {\n            top: enterElTop,\n            height: enterElHeight,\n          } = this.dragEnterDOM.getBoundingClientRect();\n\n          // 如果是group的底部，是否在边界区域\n          if (\n            [...this.dragEnterDOM.classList].includes(\n              \"lp-react-tree-drag-TreeGroup-node-ch\"\n            )\n          ) {\n            if (\n              e.clientY < enterElTop + enterElHeight &&\n              e.clientY > enterElTop + enterElHeight - 5\n            ) {\n              this.dragEnterDOM.parentElement.parentElement.parentElement.insertBefore(\n                this.refDragPlaceholder,\n                this.dragEnterDOM.parentElement.parentElement.nextElementSibling\n              );\n              setNodeByIdAndInsert(\n                this.data,\n                this.dragEnterIndex,\n                getNodeByIdAndDel(this.data, this.dragPlaceholderIndex),\n                \"appendAfter\"\n              );\n            }\n            return;\n          }\n\n          // 通过id取 拖动元素的实际值，并从对象上删除这个id key\n          const placeholderData = getNodeByIdAndDel(\n            this.data,\n            this.dragPlaceholderIndex\n          );\n\n          if (e.clientY < enterElTop + enterElHeight / 2) {\n            // 在接收元素的上面\n            if (\n              this.dragEnterDOM.parentElement.className ==\n              \"lp-react-tree-drag-TreeGroup-node\" // 如果接收元素是 group 节点\n            ) {\n              this.dragEnterDOM.parentElement.parentElement.parentElement.insertBefore(\n                this.refDragPlaceholder,\n                this.dragEnterDOM.parentElement.parentElement\n              );\n            } else {\n              elParent.insertBefore(this.refDragPlaceholder, this.dragEnterDOM);\n            }\n            setNodeByIdAndInsert(\n              this.data,\n              this.dragEnterIndex,\n              placeholderData,\n              \"insertBefore\"\n            );\n          } else {\n            // 在接收元素的下面\n            if (\n              this.dragEnterDOM.parentElement.className ==\n              \"lp-react-tree-drag-TreeGroup-node\" // 如果接收元素是 group 节点\n            ) {\n              // 当前点的children追加\n              elParent.appendChild(this.refDragPlaceholder);\n              setNodeByIdAndInsert(\n                this.data,\n                this.dragEnterIndex,\n                placeholderData,\n                \"appendChild\"\n              );\n            } else {\n              elParent.insertBefore(\n                this.refDragPlaceholder,\n                this.dragEnterDOM.nextElementSibling\n              );\n              setNodeByIdAndInsert(\n                this.data,\n                this.dragEnterIndex,\n                placeholderData,\n                \"appendAfter\"\n              );\n            }\n          }\n\n          this.dragEnterDOM = null;\n        }}\n        onDragStart={(e) => {\n          this.dragPlaceholderIndex = e.target.dataset.__lp_tree_node_id;\n          this.data = cloneDeep(data);\n        }}\n        onDragEnd={(e) => {\n          this.dragEnterDOM = null;\n          this.refDragPlaceholder.style.display = \"none\";\n          this.setState({\n            data: this.data,\n            key: Date.now(),\n          });\n        }}\n        onDragEnter={(e) => {\n          // 是否是可接收的节点\n          if (\n            e.target.className == \"lp-react-tree-drag-TreeNode\" &&\n            e.target.firstElementChild.dataset.__lp_tree_node_id\n          ) {\n            this.dragEnterIndex =\n              e.target.firstElementChild.dataset.__lp_tree_node_id;\n            this.dragEnterDOM = e.target;\n          } else if (\n            [...e.target.classList].includes(\n              \"lp-react-tree-drag-TreeGroup-node-ch\"\n            )\n          ) {\n            this.dragEnterIndex =\n              e.target.parentElement.firstElementChild.firstElementChild.dataset.__lp_tree_node_id;\n            this.dragEnterDOM = e.target;\n          } else {\n            return;\n          }\n\n          // 显示占位符\n          this.refDragPlaceholder.style.display = \"block\";\n\n          if (\n            this.dragEnterDOM.parentElement.className ==\n            \"lp-react-tree-drag-TreeGroup-node\"\n          ) {\n            this.dragEnterDOM.parentElement.parentElement.classList.remove(\n              \"lp-react-tree-drag-TreeGroup-collapse\"\n            );\n          }\n\n          // 拖拽 和 接收的 是否是同一个元素，或者不合格的元素\n          if (\n            this.dragEnterIndex == this.dragPlaceholderIndex ||\n            !this.dragEnterIndex\n          ) {\n            return;\n          }\n        }}\n        onDragOver={(e) => e.preventDefault()}\n      >\n        {(data || []).map((node) =>\n          node.type == \"group\" ? (\n            <TreeGroup\n              {...node}\n              expanded={expandedAll ? true : node.expanded}\n              expandedAll={expandedAll}\n              showLine={showLine}\n            />\n          ) : (\n            <TreeNode {...node} />\n          )\n        )}\n        <div\n          className=\"lp-react-tree-drag-TreeNode-placeholder\"\n          ref={(r) => (this.refDragPlaceholder = ReactDom.findDOMNode(r))}\n        ></div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Tree.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App\n      expandedAll={true}\n      showLine={true}\n      data={[\n        {\n          title: \"首页\",\n          type: \"page\",\n          children: [],\n          renderOp: (props) => (\n            <>\n              <a href=\"#\">编辑</a>&nbsp;\n              <a href=\"#\">隐藏</a>\n            </>\n          ),\n        },\n        {\n          title: \"团队管理\",\n          type: \"group\",\n          expanded: !0,\n          renderOp: (props) => (\n            <>\n              <a href=\"#\">编辑</a>&nbsp;\n              <a href=\"#\">隐藏</a>\n            </>\n          ),\n          children: [\n            {\n              title: \"技术管理\",\n              type: \"page\",\n              children: [],\n              renderOp: (props) => (\n                <>\n                  <a href=\"#\">编辑</a>&nbsp;\n                  <a href=\"#\">隐藏</a>\n                </>\n              ),\n            },\n            {\n              title: \"战役管理\",\n              type: \"page\",\n              children: [],\n              renderOp: (props) => (\n                <>\n                  <a href=\"#\">编辑</a>&nbsp;\n                  <a href=\"#\">隐藏</a>\n                </>\n              ),\n            },\n            { title: \"a1\", type: \"page\", children: [] },\n            { title: \"a2\", type: \"page\", children: [] },\n            {\n              title: \"事项管理\",\n              type: \"group\",\n              renderOp: (props) => (\n                <>\n                  <a href=\"#\">编辑</a>&nbsp;\n                  <a href=\"#\">隐藏</a>\n                </>\n              ),\n              children: [\n                { title: \"产品管理\", type: \"page\", children: [] },\n                { title: \"业务管理\", type: \"page\", children: [] },\n              ],\n            },\n          ],\n        },\n        {\n          title: \"关于我们\",\n          type: \"link\",\n          children: [],\n          renderOp: (props) => (\n            <>\n              <a href=\"#\">编辑</a>&nbsp;\n              <a href=\"#\">隐藏</a>\n            </>\n          ),\n        },\n      ]}\n    />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}